#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Thu Jul 28 14:14:08 2011

import wx
import os
import shutil
import modelo
import threading

# begin wxGlade: extracode
# end wxGlade

class HebraConvierte(threading.Thread):
    '''
    Clase que convierte los mp3s.
    '''
    def __init__(self, rutaAConvertir, rutaAGuardar, bitrate, ventanaConInfo, rutaCopia, copiar):
        '''
        Constructor
        '''
        threading.Thread.__init__(self)
        self.rutaAConvertir = rutaAConvertir
        self.rutaAGuardar = rutaAGuardar
        self.bitrate = bitrate
        self.ventanaConInfo = ventanaConInfo
        self.rutaDestino = rutaCopia
        self.copiar = copiar
        
    def copiaDirectorio(self, rutaOrigen, rutaDestino):
        #Preparar rutas relativas para el destino y ordenarlas, para guardar de forma ordenada.
        def copiaEnOrden(rutaOrigenRec, rutaDestinoRec):
            listRutasRelativas = os.listdir(rutaOrigenRec)
            listRutasRelativas.sort()
            try:
                # En la lista puede haber tanto ficheros como directorios a copiar, se hace esto porque shutil.copytree crea la carpeta destino.
                for pathSub in listRutasRelativas:
                    if pathSub[-4:] == ".mp3":
                        wx.CallAfter(self.ventanaConInfo.logMensage, "Coping " + rutaOrigenRec + "/" + pathSub + "\n")
                        shutil.copy(src=(rutaOrigenRec + "/" + pathSub), dst=(rutaDestinoRec + "/" + pathSub))
                    else:
                        # Caso recursivo.
                        # 1º Creas directorio.
                        os.mkdir(rutaDestinoRec + "/" + pathSub)
                        # 2º Copias en orden contenido al nuevo directorio.
                        copiaEnOrden(rutaOrigenRec + "/" + pathSub, rutaDestinoRec + "/" + pathSub)
                        # shutil.copytree(src=(rutaOrigen + "/" + pathSub), dst=(rutaDestino + "/" + pathSub))
            except:
                wx.CallAfter(self.ventanaConInfo.logMensage, "Error in the copy.")
        
        copiaEnOrden(rutaOrigen, rutaDestino)
    
    def run(self):
        '''
        Método que ejecuta la hebra (método redefinido).
        '''
        #try:
        msuc = modelo.MegaSuperUltraConversor()
        msuc.setPath(self.rutaAConvertir)
        listaRutasMP3s, listaDeComandos = msuc.convertirMp3s(self.rutaAGuardar, self.bitrate)
        i = 0
        end = len(listaRutasMP3s)
        for nuevaOrden in listaDeComandos:
            wx.CallAfter(self.ventanaConInfo.logMensage, "Converting (" + str(i + 1) + "/" + str(end) + "): " + listaRutasMP3s[i] + "\n")
            os.system((nuevaOrden).encode('utf-8'))
            i = i + 1
            
        wx.CallAfter(self.ventanaConInfo.logMensage, "Conversion ended.\n")
        #except:
        #    wx.CallAfter(self.ventanaConInfo.logMensage, "Error en la conversión.")
        #    
        #finally:
        #    wx.CallAfter(self.ventanaConInfo.trabajoDeHebraTerminado, self)
        if self.copiar:
            self.copiaDirectorio(self.rutaAGuardar, self.rutaDestino)
            wx.CallAfter(self.ventanaConInfo.logMensage, "Copy ended.\n")
        
        

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        #Añado el icono
        ico = wx.Icon('musical47.png', wx.BITMAP_TYPE_PNG)
        self.SetIcon(ico)

        self.lbAConvertir = wx.StaticText(self, -1, "  To Convert: ")
        self.tcAConvertir = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.btAConvertir = wx.Button(self, -1, "Browse...")
        self.lbGuardarEn = wx.StaticText(self, -1, "  Save in: ")
        self.tcGuardarEn = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.btGuardarEn = wx.Button(self, -1, "Browse...")
        self.lbBitrate = wx.StaticText(self, -1, "  Bitrate: ")
        self.cbBitrate = wx.ComboBox(self, -1, choices=["96", "128", "192"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.btConvertir = wx.Button(self, -1, "Convert")
        self.tcInformacion = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE|wx.TE_READONLY|wx.HSCROLL)
        # Opción para guardar ordenadamente en pendrive.
        self.lbPendrive = wx.StaticText(self, -1, "  Copy to pendrive: ")
        self.tcPendrive = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.btPendrive = wx.Button(self, -1, "Browse...")
        
        self.__set_properties()
        self.__do_layout()
        
        self.hebra = None
        self.btAConvertir.Bind(wx.EVT_BUTTON, self.examinarAConvertir)
        self.btGuardarEn.Bind(wx.EVT_BUTTON, self.examinarAGuardarEn)
        self.btConvertir.Bind(wx.EVT_BUTTON, self.convertir)
        self.btPendrive.Bind(wx.EVT_BUTTON, self.examinarPendrive)
        # end wxGlade
    
    def examinarAConvertir(self, evento=None):
        dlg=wx.DirDialog(self, "Choose a directory")
        i=dlg.ShowModal()
        if i== wx.ID_OK:
            self.tcAConvertir.SetValue(dlg.GetPath())
    
    def examinarAGuardarEn(self, evento=None):
        dlg=wx.DirDialog(self, "Choose a directory")
        i=dlg.ShowModal()
        if i== wx.ID_OK:
            self.tcGuardarEn.SetValue(dlg.GetPath())
        
    def examinarPendrive(self, evento=None):
        dlg=wx.DirDialog(self, "Choose a directory")
        i=dlg.ShowModal()
        if i== wx.ID_OK:
            self.tcPendrive.SetValue(dlg.GetPath())
            
    def logMensage(self, msg):
        '''
        Añade un mensaje al TextControl con la información de la conversión.
        '''
        self.tcInformacion.AppendText(msg)
    
    def trabajoDeHebraTerminado(self, theThread):
        '''
        Indica a la aplicación que el trabajo de la hebra ha terminado.
        '''
        self.hebra = None
    
    def convertir(self, evento=None):
        rutaAConvertir = self.tcAConvertir.GetValue()
        rutaGuardar = self.tcGuardarEn.GetValue()
        if (rutaAConvertir != "") and (rutaGuardar != "") and os.access((rutaAConvertir).encode('utf-8'),os.F_OK) and os.access((rutaGuardar).encode('utf-8'),os.F_OK) and (self.hebra == None):
            self.tcInformacion.Clear()
            self.hebra = HebraConvierte(rutaAConvertir, rutaGuardar, self.cbBitrate.GetValue(), self, self.tcPendrive.GetValue(), ((self.tcPendrive.GetValue() != "") and (self.tcPendrive.GetValue() != None)))
            self.hebra.start()
        
    
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Recursive bitrate mp3 converter")
        self.tcAConvertir.SetMinSize((180, 27))
        self.tcGuardarEn.SetMinSize((180, 27))
        self.tcPendrive.SetMinSize((180, 27))
        self.cbBitrate.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(4, 3, 0, 0)
        grid_sizer_3.Add(self.lbAConvertir, 0, 0, 0)
        grid_sizer_3.Add(self.tcAConvertir, 0, 0, 0)
        grid_sizer_3.Add(self.btAConvertir, 0, 0, 0)
        grid_sizer_3.Add(self.lbGuardarEn, 0, 0, 0)
        grid_sizer_3.Add(self.tcGuardarEn, 0, 0, 0)
        grid_sizer_3.Add(self.btGuardarEn, 0, 0, 0)
        grid_sizer_3.Add(self.lbBitrate, 0, 0, 0)
        grid_sizer_3.Add(self.cbBitrate, 0, 0, 0)
        grid_sizer_3.Add((20, 20), 0, wx.EXPAND, 0)
        
        grid_sizer_3.Add(self.lbPendrive, 0, 0, 0)
        grid_sizer_3.Add(self.tcPendrive, 0, 0, 0)
        grid_sizer_3.Add(self.btPendrive, 0, 0, 0)
        
        grid_sizer_2.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_2.Add(self.btConvertir, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.tcInformacion, 0, wx.EXPAND, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame


class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = MyFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
